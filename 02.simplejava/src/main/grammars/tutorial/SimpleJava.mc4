/* (c) https://github.com/MontiCore/monticore */
package tutorial;

grammar SimpleJava extends de.monticore.types.MCSimpleGenericTypes,
                                        de.monticore.expressions.CommonExpressions,
                                        de.monticore.expressions.AssignmentExpressions,
                                        de.monticore.expressions.BitExpressions,
                                        de.monticore.literals.MCCommonLiterals,
                                        de.monticore.symbols.OOSymbols {

  JavaCompilationUnit = MCPackageDeclaration?
                        MCImportStatement*
                        JavaArtifact;

  // JavaArtifacts are implicitly OOTypeSymbols
  JavaArtifact implements OOType = "class" Name ("extends" superType:MCType)? "{" JavaElement* "}";

  interface JavaElement;

// JavaMethods are implicitly MethodSymbols
  JavaMethod implements JavaElement, Method = MCReturnType
                                                           Name
                                                           FormalParameters
                                                           "{" JavaBlock "}";


  FormalParameters = "(" FormalParameter* ")";

  // FormalParameters are implicitly VariableSymbols
  symbol FormalParameter implements Variable = MCType Name;

  // Add a non-exporting, ordered scope to the JavaBlock, do avoid leakage of variables
  scope(non_exporting ordered) JavaBlock = (JavaVarDecl | Expression)*;

  // JavaVarDecl are implicitly FieldSymbols
  JavaVarDecl implements JavaElement, Field = MCType Name ("=" Expression)?;

}
