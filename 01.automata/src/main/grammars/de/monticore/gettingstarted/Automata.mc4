/* (c) https://github.com/MontiCore/monticore */
package de.monticore.gettingstarted;

grammar Automata extends
	de.monticore.MCBasics,
	de.monticore.types.MCBasicTypes {

    /** A ASTAutomaton represents a finite automata
        @attribute name Name of the automata
        @attribute states List of states
        @attribute transitions List of transitions
    */
    symbol scope Automaton =
      "automaton" Name AutAttributes? "{" (State | Transition)* "}" ;

    /** A ASTState represents a state of a finite automata
        @attribute name Name of state
        @attribute initial True if state is initial state
        @attribute final True if state is a final state
        @attribute states List of sub states
        @attribute transitions List of transitions
    */
    symbol State =
      "state" Name

      (("<<" ["initial"] ">>" ) | ("<<" ["final"] ">>" ))*

      ( ("{" (State | Transition)* "}") | ";") ;


    /** A ASTTransition represents a transition
        @attribute from Name of the state from which the transitions starts
        @attribute input Activation signal for this transition
        @attribute to Name of the state to which the transitions goes
    */
    // TODO: Insert simple mealy output?
    // TODO: Insert a precondition
    Transition =
      from:MCQualifiedName
      "-"
      input:Name
      ">"
      to:MCQualifiedName ";" ;

    // Note: Not part of the automata specification presented, just here to cause issues
    AutAttributes = "(" (Attribute | ",")* ")";
    symbol Attribute = MCType Name;
}
